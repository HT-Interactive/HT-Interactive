<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Die Roll Result
image_speed = 0;

if(object_index == obj_attack_die) {
    for (var i = 0; i &lt; array_height_2d(symbols); i++;) {
        symbols[i,1] += determine_result(sides,image_index,i)
    }
}

audio_stop_sound(snd_roll);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resolve Die Results with Monster
// sides[x,y] where x=side, y=0 for symbol, y=1 for value
// symbols = [(0)fail, (1)combat, (2)magic, (3)divinity, (4)thievery]
//die_found = false;
//while(obj_monster.monster_die) {
matched = false;
symbols_left = sides[image_index,1];
for (var j = symbols_left; j &gt; 0; j--;) {

    for(var i = 0; i &lt; array_length_1d(obj_monster.monster_die); i++;) {
        if(instance_exists(obj_monster.monster_die[i])) {
            if (sides[image_index,0] == obj_monster.monster_die[i].symbol) {
                //show_message("yes");
                audio_play_sound(snd_hit,1,false);
                matched = true;
      
                with(obj_monster.monster_die[i]) {
                    instance_destroy();
                }
                symbols[1,1] -= sides[image_index,1];
                symbols_left -= 1;
                if(symbols_left == 0) {
                    instance_destroy();
                }
                break;
    
            } else {
                //matched = false;
                //show_message("no");
                audio_play_sound(snd_miss,1,false);
                //break;
            } 
        }
    }
}
if (matched) {
    instance_destroy();
}
//}

/*if (sides[image_index,0] == obj_monster.monster_die1.symbol) {
    show_message("yes");
    with(obj_monster.monster_die1) {
        instance_destroy();
    }
    symbols[1,1] -= sides[image_index,1];
    instance_destroy();
} else {
    show_message("no");
    audio_play_sound(snd_miss,1,false);
}
if (obj_monster.hp &lt; 0) {
    audio_play_sound(snd_victory,1,false);
    with (obj_monster) {
        instance_destroy();
    }
}
*/
//show_message(image_index + sides[image_index,0] + sides[image_index,1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>18,18</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
